//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnlineTests.Repository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class EntitiesContainer : DbContext
    {
        public EntitiesContainer()
            : base("name=EntitiesContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int Answers_Insert(Nullable<int> questionId, string txt, Nullable<int> ansVal, Nullable<int> worth, Nullable<int> ordinalPos, string notes, string extendedDetails)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            var txtParameter = txt != null ?
                new ObjectParameter("txt", txt) :
                new ObjectParameter("txt", typeof(string));
    
            var ansValParameter = ansVal.HasValue ?
                new ObjectParameter("ansVal", ansVal) :
                new ObjectParameter("ansVal", typeof(int));
    
            var worthParameter = worth.HasValue ?
                new ObjectParameter("worth", worth) :
                new ObjectParameter("worth", typeof(int));
    
            var ordinalPosParameter = ordinalPos.HasValue ?
                new ObjectParameter("ordinalPos", ordinalPos) :
                new ObjectParameter("ordinalPos", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var extendedDetailsParameter = extendedDetails != null ?
                new ObjectParameter("ExtendedDetails", extendedDetails) :
                new ObjectParameter("ExtendedDetails", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Answers_Insert", questionIdParameter, txtParameter, ansValParameter, worthParameter, ordinalPosParameter, notesParameter, extendedDetailsParameter);
        }
    
        public virtual int Items_Insert(Nullable<byte> questionTypeId, string questionText, string notes, string extendedDetails, ObjectParameter questionId)
        {
            var questionTypeIdParameter = questionTypeId.HasValue ?
                new ObjectParameter("QuestionTypeId", questionTypeId) :
                new ObjectParameter("QuestionTypeId", typeof(byte));
    
            var questionTextParameter = questionText != null ?
                new ObjectParameter("QuestionText", questionText) :
                new ObjectParameter("QuestionText", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var extendedDetailsParameter = extendedDetails != null ?
                new ObjectParameter("ExtendedDetails", extendedDetails) :
                new ObjectParameter("ExtendedDetails", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Items_Insert", questionTypeIdParameter, questionTextParameter, notesParameter, extendedDetailsParameter, questionId);
        }
    
        public virtual ObjectResult<Items_Select_Result> Items_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Items_Select_Result>("Items_Select");
        }
    
        public virtual ObjectResult<Items_Select_Result> Items_ById_Select(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Items_Select_Result>("Items_ById_Select", idParameter);
        }
    
        public virtual ObjectResult<Answers_Select_Result> Answers_ByQuestionId_Select(Nullable<int> questionId)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Answers_Select_Result>("Answers_ByQuestionId_Select", questionIdParameter);
        }
    
        public virtual int Answers_ByQuestionId_Delete(Nullable<int> questionId)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Answers_ByQuestionId_Delete", questionIdParameter);
        }
    
        public virtual int Items_Update(Nullable<int> questionId, string questionText, string notes, string extendedDetails)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            var questionTextParameter = questionText != null ?
                new ObjectParameter("QuestionText", questionText) :
                new ObjectParameter("QuestionText", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var extendedDetailsParameter = extendedDetails != null ?
                new ObjectParameter("ExtendedDetails", extendedDetails) :
                new ObjectParameter("ExtendedDetails", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Items_Update", questionIdParameter, questionTextParameter, notesParameter, extendedDetailsParameter);
        }
    }
}
